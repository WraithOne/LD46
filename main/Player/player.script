
-- Movement speed in Pixel
local speed = 200

function init(self)
	-- Activate collision
	msg.post("#collider", "enable")

	-- Get Camera focus
	msg.post("/camera#camera", "acquire_camera_focus")
	
	-- Add variable for view direction
	self.dir = vmath.vector3()

	--Add variable for animation
	self.current_anim = nil

	-- correction vector
	self.correction = vmath.vector3()
end

function update(self, dt)
	if vmath.length_sqr(self.dir) > 1 then
		self.dir = vmath.normalize(self.dir)
	end
	local p = go.get_position()
	go.set_position(p + self.dir * speed * dt)

		-- animate the astronaut

		local anim = hash("Idle")

		if self.dir.x > 0 then
			anim = hash("Move_Right")
		elseif self.dir.x < 0 then
			anim = hash("Move_Left")
		elseif self.dir.y > 0 then
			anim = hash("Move_Up")
		elseif self.dir.y < 0 then
			anim = hash("Move_Down")
		end

		if anim ~= self.current_anim then
			msg.post("#sprite", "play_animation", { id = anim })
			self.current_anim = anim
		end

		-- done animating
		self.dir = vmath.vector3()

		-- reset correction
		self.correction = vmath.vector3()
end

function on_message(self, message_id, message, sender)
	print (message_id)
	
	--Handle movement
	if massage_id == hash("player_move_up") then
		self.dir.y = 1
	elseif massage_id == hash("player_move_down") then
		self.dir.y = -1
	elseif massage_id == hash("player_move_left") then
		self.dir.x = -1
	elseif massage_id == hash("player_move_right") then
		self.dir.x = 1
	end
	
	-- Handle collision
	if message_id == hash("contact_point_response") then
		-- Get the info needed to move out of collision. We might
		-- get several contact points back and have to calculate
		-- how to move out of all of them by accumulating a
		-- correction vector for this frame:
		if message.distance > 0 then
			-- First, project the accumulated correction onto
			-- the penetration vector
			local proj = vmath.project(self.correction, message.normal * message.distance)
			if proj < 1 then
				-- Only care for projections that does not overshoot.
				local comp = (message.distance - message.distance * proj) * message.normal
				-- Apply compensation
				go.set_position(go.get_position() + comp)
				-- Accumulate correction done
				self.correction = self.correction + comp
			end
		end
	end
end