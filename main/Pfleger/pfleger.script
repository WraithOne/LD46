-- Movement speed in Pixel
local speed = 50

local function make_path()


end

function init(self)
	msg.post("#collider", "enable")

	-- Add variable for view direction
	self.dir = vmath.vector3()

	--Add variable for animation
	self.current_anim = nil

	-- correction vector
	self.correction = vmath.vector3()
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end

function update(self, dt)
	if vmath.length_sqr(self.dir) > 1 then
		self.dir = vmath.normalize(self.dir)
	end
	local p = go.get_position()
	go.set_position(p + self.dir * speed * dt)

	-- animate the astronaut

	local anim = hash("idle")

	if self.dir.x > 0 then
		anim = hash("move_right")
	elseif self.dir.x < 0 then
		anim = hash("move_left")
	elseif self.dir.y > 0 then
		anim = hash("move_up")
	elseif self.dir.y < 0 then
		anim = hash("move_down")
	end

	if anim ~= self.current_anim then
		msg.post("#sprite", "play_animation", { id = anim })
		self.current_anim = anim
	end

	-- done animating
	self.dir = vmath.vector3()

	-- reset correction
	self.correction = vmath.vector3()
end

function on_message(self, message_id, message, sender)
	-- Handle collision
	if message_id == hash("contact_point_response") then
		-- Get the info needed to move out of collision. We might
		-- get several contact points back and have to calculate
		-- how to move out of all of them by accumulating a
		-- correction vector for this frame:
		if message.distance > 0 then
			-- First, project the accumulated correction onto
			-- the penetration vector
			local proj = vmath.project(self.correction, message.normal * message.distance)
			if proj < 1 then
				-- Only care for projections that does not overshoot.
				local comp = (message.distance - message.distance * proj) * message.normal
				-- Apply compensation
				go.set_position(go.get_position() + comp)
				-- Accumulate correction done
				self.correction = self.correction + comp
			end
		end
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
