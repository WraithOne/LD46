-- Movement speed in Pixel
local move_speed = 50
-- Movement time in ms
local move_time = 3
-- Movement time in ticks
local move_length = 0
-- Movement direction
local move_dir = 0

-- Movement next update
local move_update = 0

function init(self)
	msg.post("#collider", "enable")

	-- Add variable for view direction
	self.dir = vmath.vector3()

	--Add variable for animation
	self.current_anim = nil

	-- correction vector
	self.correction = vmath.vector3()
end

function update(self, dt)

	if move_update >= move_time then
		-- Generate new move direction
		move_dir = math.random(0, 3)
		-- Generate new move length
		move_length = math.random(1, 150)

		-- update next time
		move_update = 0
	else
		move_update = dt + move_update
	end
	
	-- Set direction
	if move_length > 0 then
		if move_dir == 0 then
			self.dir.y = -1
		elseif move_dir == 1 then
			self.dir.y = 1
		elseif move_dir == 2 then
			self.dir.x = -1
		elseif move_dir == 3 then
			self.dir.x = 1
		end
		
		move_length = move_length - 1
	end
	

	-- Normalize
	if vmath.length_sqr(self.dir) > 1 then
		self.dir = vmath.normalize(self.dir)
	end

	-- Move
	local p = go.get_position()
	go.set_position(p + self.dir * move_speed * dt)
	
	-- animate the plfeger
	local anim = hash("idle")

	if self.dir.x > 0 then
		anim = hash("move_right")
	elseif self.dir.x < 0 then
		anim = hash("move_left")
	elseif self.dir.y > 0 then
		anim = hash("move_up")
	elseif self.dir.y < 0 then
		anim = hash("move_down")
	end

	if anim ~= self.current_anim then
		msg.post("#sprite", "play_animation", { id = anim })
		self.current_anim = anim
	end
	
	-- done animating
	self.dir = vmath.vector3()
	
	-- reset correction
	self.correction = vmath.vector3()
end

function on_message(self, message_id, message, sender)
	-- Handle collision
	if message_id == hash("contact_point_response") then
		-- Get the info needed to move out of collision. We might
		-- get several contact points back and have to calculate
		-- how to move out of all of them by accumulating a
		-- correction vector for this frame:
		if message.distance > 0 then
			-- First, project the accumulated correction onto
			-- the penetration vector
			local proj = vmath.project(self.correction, message.normal * message.distance)
			if proj < 1 then
				-- Only care for projections that does not overshoot.
				local comp = (message.distance - message.distance * proj) * message.normal
				-- Apply compensation
				go.set_position(go.get_position() + comp)
				-- Accumulate correction done
				self.correction = self.correction + comp
			end
		end
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
